getgenv().webhook = "https://discord.com/api/webhooks/1193664331469029377/pMe1IycUYmiVVzSsncbCxAkb414i6oB_9BkWtTERCzEbGGfPYIlC_dfT06i5hj9jsx3w" -- webhook link for successful snipes
getgenv().webhookFail = "https://discord.com/api/webhooks/1193898383744704572/TkElUwYJfzZnEfdq9-V3NbFovYKqccqb8KJedZN2B6OK6jM2RtJKjtLtbT528PZ5uoJm" -- webhook link for successful snipes
getgenv().userid = "476801487482388481" -- pings your discord id if it snipes a huge or titanic 
getgenv().alts = {"",""} -- put usernames to hop if more than two of them are in the same server
getgenv().normalwebhook = "https://discord.com/api/webhooks/1193664331469029377/pMe1IycUYmiVVzSsncbCxAkb414i6oB_9BkWtTERCzEbGGfPYIlC_dfT06i5hj9jsx3w"
getgenv().snipeNormalPets = false -- snipes other items that are priced at 1
repeat wait() until game:IsLoaded()
if game.PlaceId == 15502339080 then

local osclock = os.clock()
repeat task.wait() until game:IsLoaded()

setfpscap(10)
game:GetService("RunService"):Set3dRenderingEnabled(false)
local Booths_Broadcast = game:GetService("ReplicatedStorage").Network:WaitForChild("Booths_Broadcast")
local Players = game:GetService('Players')
local Player = Players.LocalPlayer
local getPlayers = Players:GetPlayers()
local PlayerInServer = #getPlayers
local http = game:GetService("HttpService")
local ts = game:GetService("TeleportService")
local rs = game:GetService("ReplicatedStorage")

local vu = game:GetService("VirtualUser")
Players.LocalPlayer.Idled:connect(function()
	vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	task.wait(1)
	vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Core["Idle Tracking"].Disabled = true

local character = Player.Character or Player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildWhichIsA('Humanoid')

local function moveToPosition(position)
	local moveFinished = false
	local connection
	connection = humanoid.MoveToFinished:Connect(function(reached)
		moveFinished = reached
		if connection then
			connection:Disconnect()
		end
	end)
	humanoid:MoveTo(position)
	repeat task.wait() until moveFinished
end
	
moveToPosition(Vector3.new(-970, 284, -2278))
moveToPosition(Vector3.new(-935, 284, -2189))
moveToPosition(Vector3.new(-919, 285, -2183))

local Library = require(game.ReplicatedStorage:WaitForChild('Library'))
	
local function processListingInfo(uid, gems, item, version, shiny, amount, boughtFrom, boughtPet, class, boughtMessage, ping)
	local gemamount = Player.leaderstats["ðŸ’Ž Diamonds"] and Player.leaderstats["ðŸ’Ž Diamonds"].Value or 0
    local versionVal = { [2] = "Rainbow", [1] = "Golden" }
    local versionStr = versionVal[version] or (version == nil and "Normal" or "")
    local snipeMessage = string.format("Found a %s%s%s!", versionStr, shiny and " Shiny " or " ", item)
    local tag = string.find(item, "Huge") and "@everyone" or ""
    local colourcheck = boughtPet and 0x05ff00 or 0xff000f
	local failMessage = boughtPet and "Sniped! No errors occured!" or tostring(boughtMessage)

    local message1 = {
    	['content'] = tag,
    	['embeds'] = {
		{
			['title'] = snipeMessage,
            ["color"] = tonumber(colourcheck),
            ["timestamp"] = DateTime.now():ToIsoDate(),
            ['fields'] = {
                {
                	['name'] = "*LISTING INFO* :",
                    ['value'] = string.format("**Price :** %s gems \n**Amount :** %s\n**Seller :** ||%s||\n**Listing ID : ** ||%s||", tostring(gems), tostring(amount or 1), tostring(boughtFrom), tostring(uid)),
                },
                {
                    ['name'] = "*USER INFO* :",
                    ['value'] = string.format("**User :** ||%s||\n**Remaining gems :** %s", Player.Name, tostring(gemamount)),
                },
				{
                    ['name'] = "*SNIPER INFO* :",
                    ['value'] = string.format("**Status :** %s\n**Ping :** %s ms", failMessage, tostring(ping)),
                }, 
				},
                	['footer'] = {
                    ['text'] = "V 3.2 by edmond.yv"
                },
            ['thumbnail'] = {
            	['url'] = "https://cdn.discordapp.com/attachments/1057080336313495614/1190229689126621235/target_PNG42.png?ex=65a10ac7&is=658e95c7&hm=51fb914c7330c90326660077f6487ce9238a26ad483ad38bbccc41cbc216ad59&"
            },
        },
    }
	}
    local jsonMessage = http:JSONEncode(message1)
	local success, webMessage = pcall(function()
		http:PostAsync(webhook, jsonMessage)
	end)
    if success == false then
	local response = request({
		Url = webhook,
		Method = "POST",
		Headers = {["Content-Type"] = "application/json"},
		Body = jsonMessage
	})
	end
end

local function tryPurchase(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
	local ping = Player:GetNetworkPing()
	if buytimestamp > listTimestamp then
		task.wait(3.4 - ping)
	end
	local boughtPet, boughtMessage = game:GetService("ReplicatedStorage").Network.Booths_RequestPurchase:InvokeServer(playerid, uid)
	processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, class, boughtMessage, math.floor(ping*1000))
end

Booths_Broadcast.OnClientEvent:Connect(function(username, message)
	if type(message) == "table" then
		local highestTimestamp = -math.huge -- Initialize with the smallest possible number
		local key = nil
		local listing = nil
        for v, value in pairs(message["Listings"] or {}) do
			if type(value) == "table" and value["ItemData"] and value["ItemData"]["data"] then
				local timestamp = value["Timestamp"]
				if timestamp > highestTimestamp then
					highestTimestamp = timestamp
					key = v
					listing = value
				end
			end
		end
		if listing then
			local buytimestamp = listing["ReadyTimestamp"]
			local listTimestamp = listing["Timestamp"]
			local data = listing["ItemData"]["data"]
			local gems = tonumber(listing["DiamondCost"])
            local uid = key
			local item = data["id"]
			local version = data["pt"]
			local shiny = data["sh"]
			local amount = tonumber(data["_am"]) or 1
			local playerid = message['PlayerID']
			local class = tostring(listing["ItemData"]["class"])
			local unitGems = gems/amount

			print(string.format("%s listed %s %s - %s gems, %s gems/unit", tostring(username), tostring(amount), tostring(item), tostring(gems), tostring(unitGems)))

			if string.find(item, "Huge") and unitGems <= 10000 then
				coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
				return
			elseif class == "Pet" then
				local type = Library.Directory.Pets[item]
				if type.exclusiveLevel and unitGems <= 15000 and item ~= "Banana" and item ~= "Coin" then
					coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				elseif type.titanic and unitGems <= 10000000 then
					coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
                	    	elseif type.huge and unitGems <= 1000000 then
					coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			elseif (item == "Titanic Christmas Present" or string.find(item, "2024 New Year")) and unitGems <= 30000 then
				coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
				return
        	elseif class == "Egg" and unitGems <= 30000 then
        	    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
				return
		    elseif ((string.find(item, "Key") and not string.find(item, "Lower")) or string.find(item, "Ticket") or string.find(item, "Charm") or class == "Charm") and unitGems <= 2500 then
		     	coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
				return
			elseif class == "Enchant" and unitGems <= 30000 then
				if item == "Fortune" then
					coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				elseif string.find(item, "Chest Mimic") then
					coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				elseif item == "Lucky Block" then
					coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				elseif item == "Massive Comet" then
					coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
        	end
		end
    end
end)
else
 print("Heello World"
  end
